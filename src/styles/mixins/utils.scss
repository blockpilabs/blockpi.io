@mixin utils-user-select($value) {
  -moz-user-select: $value;
  -webkit-user-select: $value;
  -ms-user-select: $value;
}

@mixin utils-clearfix {
  $selector: &;

  @at-root {
    #{$selector}::before,
    #{$selector}::after {
      display: table;
      content: "";
    }
    #{$selector}::after {
      clear: both
    }
  }
}

@mixin utils-vertical-center {
  $selector: &;

  @at-root {
    #{$selector}::after {
      display: inline-block;
      content: "";
      height: 100%;
      vertical-align: middle
    }
  }
}

// @mixin utils-ellipsis {
//   overflow: hidden;
//   text-overflow: ellipsis;
//   white-space: nowrap;
// }
// -webkit-line-clamp 是一个 不规范的属性，它没有出现在 CSS 规范草案中
// display: -webkit-box; 必须结合的属性 ，将对象作为弹性伸缩盒子模型显示
// -webkit-box-orient 必须结合的属性 ，设置或检索伸缩盒对象的子元素的排列方式
@mixin utils-ellipsis($rowCount: 1) {
  @if $rowCount <= 1 {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  } @else {
    min-width: 0;
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-line-clamp: $rowCount;
    -webkit-box-orient: vertical;
  }
}
/**
* 1px边框
* {List}: 多个方向边框, 默认值为bottom, 根据需要传入(top, left, bottom, right) 4个方向;
* {Color} 边框的颜色, 默认#ccc;
* {List} 4个圆角半径, 默认0;
* {String} 高级设置, 一般都不需要改动, 由于细边框的实现使用了css的伪类, 所以为了规避可能出现的样式冲突, 我们可以自己指定使用:after还是:before, 默认after;
*/
@mixin thinBorder(
  $directionMaps: bottom,
  $color: #ccc,
  $radius: (0,0,0,0),
  $position: after
) {
// 是否只有一个方向
$isOnlyOneDir: string==type-of($directionMaps);

@if ($isOnlyOneDir) {
  $directionMaps: ($directionMaps);
}
@each $directionMap in $directionMaps {
  border-#{$directionMap}: 1px solid $color;
}
// 判断圆角为list还是number
@if(list == type-of($radius)) {
  border-radius: nth($radius, 1)
    nth($radius, 1)
    nth($radius, 2)
    nth($radius, 3)
    nth($radius, 4)
} @else {
  border-radius: $radius;
}
@media only screen and (-webkit-min-device-pixel-ratio:2){
  & {
    position: relative;
    // 删除1像素密度下的边框
    @each $directionMap in $directionMaps {
      border-#{$directionMap}: none;
    }
  }
  &:#{$position} {
    content: ' ';
    position: absolute;
    top: 0;
    left: 0;
    display: block;
    width: 200%;
    height: 200%;
    transform: scale(0.5);
    box-sizing: border-box;
    padding: 1px;
    transform-origin: 0 0 ;
    pointer-events: none;
    border: 0 solid $color;
    @each $directionMap in $directionMaps {
      border-#{$directionMap}-width: 1px;
    }
    @if (list == type-of($radius)) {
      border-radius: nth($radius, 1) *
      2
      nth($radius, 2) *
      2
      nth($radius, 3) *
      2
      nth($radius, 4) *
      2;
    } @else {
      border-radius: $radius * 2;
    }
  }
}
@media only screen and (-webkit-min-device-pixel-ratio: 3) {
  &:#{$position} {
    // 判断圆角是list还是number
    @if (list==type-of($radius)) {
      border-radius: nth($radius, 1) *
        3
        nth($radius, 2) *
        3
        nth($radius, 3) *
        3
        nth($radius, 4) *
        3;
    } @else {
      border-radius: $radius * 3;
    }
    width: 300%;
    height: 300%;
    transform: scale(0.3333);
  }
}
}
